#6.
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
from scipy.optimize import newton

# Constants
g = 10
t1 = 10

def exact_solution(t):
    """Exact solution of the differential equation."""
    return -0.5 * g * t**2 + 0.5*t1*g*t

def ode(t, x):
    """ODE for the shooting method."""
    dxdt = x[1]
    dvdt = -g
    return [dxdt, dvdt]

def shooting_method(v_guess):
    """Solves the ODE with the given initial velocity guess."""
    x0 = [0, v_guess]  # Initial conditions [x(0), v_guess]
    sol = solve_ivp(ode, [0, t1], x0, t_eval=np.linspace(0, t1, 100))
    return sol.y[0, -1]  # Return x(t1)

# Array of initial velocity guesses
v_guesses = np.linspace(1, 30, 5)  # 5 candidate solutions
numerical_solutions = []

# Solve for each initial velocity guess
for v_guess in v_guesses:
    # Use Newton's method to find the correct initial velocity
    v_correct = newton(shooting_method, v_guess)
    x0 = [0, v_correct]
    
    # Solve the ODE with the correct initial velocity
    sol = solve_ivp(ode, [0, t1], x0, t_eval=np.linspace(0, t1, 100))
    numerical_solutions.append(sol.y[0])

def candidate(v0):
    x0 = [0, v0] 
    sol = solve_ivp(ode, [0, t1], x0, t_eval=np.linspace(0, t1, 100))
    return sol.y[0]

# Plotting
t_values = np.linspace(0, t1, 100)
plt.figure(figsize=(10, 6))
plt.plot(t_values, exact_solution(t_values), 'r^',label='Exact Solution')


# Additional candidate solutions for chosen initial velocities
chosen_v = [15, 20, 25, 40, 60,65]
print(v_correct)
for v in chosen_v:
    plt.plot(t_values, candidate(v), label=f'Candidate solution with v0: {v}')
    
plt.plot(t_values, candidate(v_correct), label=f'numerical solution')
plt.xlabel('Time (t)')
plt.ylabel('Position (x)')
plt.title('Shooting Method for Boundary Value Problem')
plt.legend()
plt.grid(True)
plt.ylim(0, 250)  # Adjusted ylim for better visualization
plt.show()
