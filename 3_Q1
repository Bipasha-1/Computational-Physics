#1.
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

def f(x):
    if(x==0):
        return 1
    else:
        return np.sin(x)/x
def analytical_func(x):
    if(x>1):
        return 0
    elif(x<-1):
        return 0
    else:
        return(np.sqrt(np.pi/2))
 
n=1000  
xmax=400
xmin=-400
dx=(xmax-xmin)/(n-1)
x= np.arange(xmin,xmax+dx,dx,dtype=np.complex_)

data=np.zeros(n,dtype=np.complex_)
box=np.zeros(n,dtype=np.complex_)
k=np.fft.fftfreq(n,dx)
k=2*np.pi*k
k1=np.linspace(k.min(),k.max(),num=n,endpoint=True)
for i in range(0,n,1):
    data[i]=f(x[i])
    box[i]=analytical_func(k1[i])
  
nft=np.fft.fft(data,norm='ortho')
after_ft=dx*np.sqrt(n/(2.0*np.pi))*(np.exp(-1j*k*x.min()))*nft

# Poltting and comparing between fourier transform found analytically and numerically
plt.plot(k,after_ft.real,".",label="Fourier Transform using Numpy")
plt.plot(k1,box.real,"",label="Analytic Fourier Transform")
plt.legend(fontsize=15)
plt.title("Fourier transform of sinc(x)",fontsize=20)
plt.xlabel("k",fontsize=18)
plt.ylabel("F(k)",fontsize=18)
plt.show()

